sapply(t, function(s) strsplit(s,"_")[[1]])
sapply(t, function(s) strsplit(s,"_")[[1]][1])
sapply(t, function(s) strsplit(s,"_")[[1]][[1]])
?sapply
sapply(t, function(s) strsplit(s,"_")[[1]][[1]], USE_NAMES=F)
sapply(t, function(s) strsplit(s,"_")[[1]][[1]], USE.NAMES=F)
pieces <- strsplit(t,"_")
pieces
sapply(pieces, "[", 1)
"["(pieces,1)
pieces[1]
fullNames <- c("bob_smith","mary_jane","jose_chung","michael_marx","charlie_ivan")
nameFrame <- data.frame(strsplit(fullnames,"_"))
nameFrame <- data.frame(strsplit(fullNames,"_"))
nameFrame
splitNAmes <- strsplit(fullNames, "_")
splitNames <- strsplit(fullNames, "_")
rm(splitNAmes)
splitNames
data.frame(splitNames)
?data.frame
nameFrame <- data.frame(strsplit(fullNames,"_"))
nameFrame
names(nameFrame) <- fullNames
nameFrame
rpois(100, 100)
hist(rpois(1000, 100))
hist(rpois(100000, 100))
hist(rpois(100000, 10))
hist(110+rpois(100000, 10))
5 * rpois(N, 175/5)
N<-100
5 * rpois(N, 175/5)
mean(5 * rpois(N, 175/5))
sumary(5 * rpois(N, 175/5))
summary(5 * rpois(N, 175/5))
summary(10 * rpois(N, 175/10))
10 * rpois(N, 175/10)
summary(100 * rpois(N, 175/10))
summary(10 * rpois(100, 175/10))
rpois(100, 5)
hist(rpois(100, 5))
hist(rpois(100, 6))
hist(rpois(1000, 6))
hist(rpois(1000, 2))
rpois(N, 45)
summary(rpois(N, 45))
summary(rpois(N, 50))
summary(rpois(N, 5))
summary(10*rpois(N, 5))
10*rpois(N, 5)
10*rpois(N, 5) + runif(N, 10, 10)
runif(N, 10, 10)
rnorm(N, 10, 10)
round(rnorm(N, 10, 10))
round(rnorm(N, 10, 5))
10*rpois(N, 5) + round(rnorm(N, 10, 5))
10*rpois(N, 4) + round(rnorm(N, 10, 5))
summary(10*rpois(N, 4) + round(rnorm(N, 10, 5)))
summary(10*rpois(N, 5) + round(rnorm(N, 10, 5)))
N<-1000
summary(10*rpois(N, 5) + round(rnorm(N, 10, 5)))
summary(9*rpois(N, 5) + round(rnorm(N, 10, 5)))
library(reshape)
data(french_fries)
head(french_fries)
french_fires
french_fries
q()
N <- 1:1000 * 1000
G <- 1e7
L <- 500
N
P <- 1 - (1 - L/G)^N
P
plot(N,P)
N <- 1000:1000000 * 1000#
G <- 3.2e9#
L <- 1000#
P <- 1 - (1 - L/G)^N
plot(N,P)
N <- 1:1000 * 1000000#
G <- 3.2e9#
L <- 1000#
P <- 1 - (1 - L/G)^N#
plot(N,P)
plot(N, log(1-P))
log(1-P)
R = N*L/G
R
e^-R
e
exp(-R)
plot((1 - L/G)^N, exp(-R))
plot(1-exp(-R), N)
plot(N, 1-exp(-R))
N <- 1:1000 * 100000
R = N*L/G
plot(N, 1-exp(-R))
L <- 25
plot(N, 1-exp(-N*L/G))
L=100
plot(N, 1-exp(-N*L/G))
L=500
plot(N, 1-exp(-N*L/G))
L=250
plot(N, 1-exp(-N*L/G))
L=100
plot(N, 1-exp(-N*L/G))
L=120
plot(N, 1-exp(-N*L/G))
L=200
plot(N, 1-exp(-N*L/G))
plot(N, N * exp(-N*L/G))
q()
require(deSolve) #
#
G <- 1	# generation#
Triggered<-0#
#
param <- c( k1=0.015,k4=200,k6=2,a=0.0001,b=0.005 )#
#
state <- c( u=0.0075,v=0.48,m=1 )	# initial conditions#
#
funTyson0 <- function (t, y, pars){#
	with (as.list(c(y, pars)), {#
		du= k4*(v-u)*(a+u^2) - k6*u#
		dv= k1*m/2^G - k6*u#
		dm= b*m#
		# global -1 {u-.2} {m=.5*m}#
		# this doesn't work (m is not global)#
		# if ((du<0) && (u<=0.2)) m=m/2#
		if ((du<0) && (u<=0.2) && (Triggered==0)) {#
			G <<- G+1#
			Triggered <<- 1#
		}#
		if (u>0.2) Triggered=0#
		list(c(du, dv, dm)) #
	})#
}#
#
times <- seq(0, 1000, len=10000)#
out <- as.data.frame(ode(y=state,times=times,func=funTyson0,parms=param)) #
#plot(times, out$m, type="l", col="black")#
plot(times, out$u, type="l", col="red")#
lines(times, out$v, type="l", col="green")
if (x > 0){print('yes')}else{print('no')}
x<-1
if (x > 0){print('yes')}else{print('no')}
if (x > 0){print('yes')}else if(x==0){print('maybe')}else{print('no')}
x<=0
if (x > 0){#
	print('yes')#
} else {#
	if(x==0){#
		print('maybe')#
	} else {#
		print('no')#
	}#
}
x<-0
if (x > 0){#
	print('yes')#
} else {#
	if(x==0){#
		print('maybe')#
	} else {#
		print('no')#
	}#
}
x<- -1
if (x > 0){#
	print('yes')#
} else {#
	if(x==0){#
		print('maybe')#
	} else {#
		print('no')#
	}#
}
x<- 1
if (x > 0){#
	print('yes')#
} else {#
	if(x==0){#
		print('maybe')#
	} else {#
		print('no')#
	}#
}
ra=6, rb=4
ra=6
rb=4
min(ra, rb)
pi
Ao <- function(ra, rb, d){#
	if ( ra + rb < d ){#
		return(0)#
	}#
	if ( d <= min(ra, rb) ){#
		smallR = min(ra, rb)#
		return(pi * smallR^2)#
	}#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}
Ao(3,4,8)
Ao(3,4,7)
Ao(3,4,6)
Ao(3,4,5)
Ao(3,4,4)
Ao(3,4,3)
Ao(3,4,2)
9 * pi
ra
rb
10:1
distances <- seq(10, 0, by=0.1)
distances <- seq(10, 0, by=-0.1)
distances
Ao(ra, rb, distances)
ra
rb
A
A0
Ao
for (d in distance){}
for (d in distances){ print(d)}
for (d in distances){ print(d, " ", Ao(ra, rb, d))}
for (d in distances){ print(c(d, " ", Ao(ra, rb, d)))}
for (d in distances){ print(c(d, Ao(ra, rb, d)))}
ra + rb
Ao <- function(ra, rb, d){#
	if ( ra + rb <= d ){#
		return(0)#
	}#
	if ( d <= min(ra, rb) ){#
		smallR = min(ra, rb)#
		return(pi * smallR^2)#
	}#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}
for (d in distances){ print(c(d, Ao(ra, rb, d)))}
distances <- seq(0, 12, by=0.01)
for (d in distances)(print( c(d, Ao(d))))
for (d in distances)(print( c(d, Ao(ra, rab, d))))
for (d in distances)(print( c(d, Ao(ra, rb, d))))
distances <- seq(0, 12, by=0.001)
for (d in distances)(print( c(d, Ao(ra, rb, d))))
Ao(ra, rb, distances)
Ao <- function(ra, rb, d){#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}
Ao(ra, rb, distances)
distances <- seq(0, 12, by=0.1)
Ao(ra, rb, distances)
distances
c([1,2,3],[4,5,6])
c( c(1,2,3), c(4,5,6))
array(10)
integer(10)
float(10)
real(10)
myReals = real(10)
myReals[5]=1.2
myReals
ls()
length(distances)
distances[1]
i <- 1#
areas = real(length(distances))#
for (d in distances){#
	areas[i] = Ao(ra, rb, d)#
	i <- i + 1#
}
warnings()
Ao <- function(ra, rb, d){#
	if ( ra + rb <= d ){#
		return(0)#
	}#
	if ( d <= min(ra, rb) ){#
		smallR = min(ra, rb)#
		return(pi * smallR^2)#
	}#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}
i <- 1#
areas = real(length(distances))#
for (d in distances){#
	areas[i] = Ao(ra, rb, d)#
	i <- i + 1#
}
plot(distances, area)
plot(distances, areas)
plot(distances, areas, type="l")
#foo
Au <- function(ra, rb, d){ # "unbounded" area of overlap#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}
lines(distances, Au(distances), col=blue)
lines(distances, Au(ra, rb,distances), col=blue)
lines(distances, Au(ra, rb,distances), col="Blue")
abs(-1)
Ao <- function(ra, rb, d){#
	if ( abs(ra - rb) <= d ){#
		return(0)#
	}#
	if ( d <= min(ra, rb) ){#
		smallR = min(ra, rb)#
		return(pi * smallR^2)#
	}#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}
i <- 1#
areas = real(length(distances))#
for (d in distances){#
	areas[i] = Ao(ra, rb, d)#
	i <- i + 1#
}
plot(distances, areas, type="l")
Ao <- function(ra, rb, d){#
	if ( abs(ra - rb) >=d ){#
		return(0)#
	}#
	if ( d <= min(ra, rb) ){#
		smallR = min(ra, rb)#
		return(pi * smallR^2)#
	}#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}
Ao <- function(ra, rb, d){#
	if ( ra - rb <= d ){#
		return(0)#
	}#
	if ( d <= abs(ra - rb) ){#
		smallR = min(ra, rb)#
		return(pi * smallR^2)#
	}#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}
i <- 1#
areas = real(length(distances))#
for (d in distances){#
	areas[i] = Ao(ra, rb, d)#
	i <- i + 1#
}
plot(distances, areas, type="l")
abs(ra-rb)
ra
rb
Ao <- function(ra, rb, d){#
	if ( ra + rb <= d ){#
		return(0)#
	}#
	if ( d <= abs(ra - rb) ){#
		smallR = min(ra, rb)#
		return(pi * smallR^2)#
	}#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}
i <- 1#
areas = real(length(distances))#
for (d in distances){#
	areas[i] = Ao(ra, rb, d)#
	i <- i + 1#
}
plot(distances, areas, type="l")
Au <- function(ra, rb, d){ # "unbounded" area of overlap#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}
lines(distances, Au(ra, rb,distances), col="Blue")
Au1 <- function(ra, rb, d){ # "variation 1; try to minimize rounding errors#
	t1 <- ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) )#
	t2 <- rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) )#
	t3 <- sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(t1 + t2 - t3)#
}
lines(distances, Au1(ra, rb,distances), col="red")
ra <- 3#
rb <- 2#
#
Ao <- function(ra, rb, d){#
	if ( ra + rb <= d ){#
		return(0)#
	}#
	if ( d <= abs(ra - rb) ){#
		smallR = min(ra, rb)#
		return(pi * smallR^2)#
	}#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}#
#
#
i <- 1#
areas = real(length(distances))#
for (d in distances){#
	areas[i] = Ao(ra, rb, d)#
	i <- i + 1#
}#
#
plot(distances, areas, type="l")#
#
Au <- function(ra, rb, d){ # "unbounded" area of overlap#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}#
#
lines(distances, Au(ra, rb,distances), col="Blue")
#
plot(distances, areas, type="l", ylab="area of overlap")#
#
lines(distances, Au(ra, rb,distances), col="Blue")
plot(distances, areas, type="l", ylab="area of overlap", xlab="distance between centers")#
#
lines(distances, Au(ra, rb,distances), col="Blue")
ra <- 7#
rb <- 4#
#
Ao <- function(ra, rb, d){#
	if ( ra + rb <= d ){#
		return(0)#
	}#
	if ( d <= abs(ra - rb) ){#
		smallR = min(ra, rb)#
		return(pi * smallR^2)#
	}#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}#
#
#
i <- 1#
areas = real(length(distances))#
for (d in distances){#
	areas[i] = Ao(ra, rb, d)#
	i <- i + 1#
}#
#
Au <- function(ra, rb, d){ # "unbounded" area of overlap#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}#
#
plot(distances, areas, type="l", ylab="area of overlap", xlab="distance between centers")#
#
lines(distances, Au(ra, rb,distances), col="Blue")
ra <- 7#
rb <- 4#
distances <- seq(0, ra + rb + 1, by=0.01)#
#
Ao <- function(ra, rb, d){#
	if ( ra + rb <= d ){#
		return(0)#
	}#
	if ( d <= abs(ra - rb) ){#
		smallR = min(ra, rb)#
		return(pi * smallR^2)#
	}#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}#
#
#
i <- 1#
areas = real(length(distances))#
for (d in distances){#
	areas[i] = Ao(ra, rb, d)#
	i <- i + 1#
}#
#
Au <- function(ra, rb, d){ # "unbounded" area of overlap#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}#
#
plot(distances, areas, type="l", ylab="area of overlap", xlab="distance between centers")#
#
lines(distances, Au(ra, rb,distances), col="Blue")
smallR = min(ra, rb)
smallR
ra
rb
pi * smallR^2
ra <- 6#
rb <- 5#
distances <- seq(0, ra + rb + 1, by=0.01)#
#
Ao <- function(ra, rb, d){#
	if ( ra + rb <= d ){#
		return(0)#
	}#
	if ( d <= abs(ra - rb) ){#
		smallR = min(ra, rb)#
		return(pi * smallR^2)#
	}#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}#
#
#
i <- 1#
areas = real(length(distances))#
for (d in distances){#
	areas[i] = Ao(ra, rb, d)#
	i <- i + 1#
}#
#
Au <- function(ra, rb, d){ # "unbounded" area of overlap#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}#
#
plot(distances, areas, type="l", ylab="area of overlap", xlab="distance between centers")#
#
lines(distances, Au(ra, rb,distances), col="Blue")
ra <- 5#
rb <- 6#
distances <- seq(0, ra + rb + 1, by=0.01)#
#
Ao <- function(ra, rb, d){#
	if ( ra + rb <= d ){#
		return(0)#
	}#
	if ( d <= abs(ra - rb) ){#
		smallR = min(ra, rb)#
		return(pi * smallR^2)#
	}#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}#
#
#
i <- 1#
areas = real(length(distances))#
for (d in distances){#
	areas[i] = Ao(ra, rb, d)#
	i <- i + 1#
}#
#
Au <- function(ra, rb, d){ # "unbounded" area of overlap#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}#
#
plot(distances, areas, type="l", ylab="area of overlap", xlab="distance between centers")#
#
lines(distances, Au(ra, rb,distances), col="Blue")
Au <- function(ra, rb, d){#
	relDiff <- (rb^2 - ra^2)#
	t1 <- ra^2 * acos( (d^2 - relDiff)/(2*d*ra) )#
	t2 <- rb^2 * acos( (d^2 + relDiff)/(2*d*rb) )#
	t3 <- sqrt( (d^2 - relDiff)/2 )#
	return(t1 + t2 - t3)#
}
lines(distances, Au(ra, rb,distances), col="Red")
Au <- function(ra, rb, d){#
	relDiff <- abs(rb^2 - ra^2)#
	t1 <- ra^2 * acos( (d^2 - relDiff)/(2*d*ra) )#
	t2 <- rb^2 * acos( (d^2 + relDiff)/(2*d*rb) )#
	t3 <- sqrt( (d^2 - relDiff)/2 )#
	return(t1 + t2 - t3)#
}
#
lines(distances, Au(ra, rb,distances), col="Red")
plot(distances, areas, type="l", ylab="area of overlap", xlab="distance between centers")#
#
lines(distances, Au(ra, rb,distances), col="Blue")
ra <- 6#
rb <- 5#
distances <- seq(0, ra + rb + 1, by=0.01)#
#
Ao <- function(ra, rb, d){#
	if ( ra + rb <= d ){#
		return(0)#
	}#
	if ( d <= abs(ra - rb) ){#
		smallR = min(ra, rb)#
		return(pi * smallR^2)#
	}#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}#
#
#
i <- 1#
areas = real(length(distances))#
for (d in distances){#
	areas[i] = Ao(ra, rb, d)#
	i <- i + 1#
}#
#
Au <- function(ra, rb, d){#
	relDiff <- abs(rb^2 - ra^2)#
	t1 <- ra^2 * acos( (d^2 - relDiff)/(2*d*ra) )#
	t2 <- rb^2 * acos( (d^2 + relDiff)/(2*d*rb) )#
	t3 <- sqrt( (d^2 - relDiff)/2 )#
	return(t1 + t2 - t3)#
}#
#
plot(distances, areas, type="l", ylab="area of overlap", xlab="distance between centers")#
#
lines(distances, Au(ra, rb,distances), col="Blue")
Au <- function(ra, rb, d){#
	relDiff <- rb^2 - ra^2#
	t1 <- ra^2 * acos( (d^2 - relDiff)/(2*d*ra) )#
	t2 <- rb^2 * acos( (d^2 + relDiff)/(2*d*rb) )#
	t3 <- sqrt( (d^2 - relDiff)/2 )#
	return(t1 + t2 - t3)#
}
lines(distances, Au(ra, rb,distances), col="Red")
ra <- 5#
rb <- 5#
distances <- seq(0, ra + rb + 1, by=0.01)#
#
Ao <- function(ra, rb, d){	# ra must be >= rb#
	if ( ra + rb <= d ){#
		return(0)#
	}#
	if ( d <= abs(ra - rb) ){#
		smallR = min(ra, rb)#
		return(pi * smallR^2)#
	}#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}#
#
#
i <- 1#
areas = real(length(distances))#
for (d in distances){#
	areas[i] = Ao(ra, rb, d)#
	i <- i + 1#
}#
#
Au <- function(ra, rb, d){#
	relDiff <- rb^2 - ra^2#
	t1 <- ra^2 * acos( (d^2 - relDiff)/(2*d*ra) )#
	t2 <- rb^2 * acos( (d^2 + relDiff)/(2*d*rb) )#
	t3 <- sqrt( (d^2 - relDiff)/2 )#
	return(t1 + t2 - t3)#
}#
#
plot(distances, areas, type="l", ylab="area of overlap", xlab="distance between centers")#
#
lines(distances, Au(ra, rb,distances), col="Blue")
ra <- 5#
rb <- 4#
distances <- seq(0, ra + rb + 1, by=0.01)#
#
Ao <- function(ra, rb, d){	# ra must be >= rb#
	if ( ra + rb <= d ){#
		return(0)#
	}#
	if ( d <= abs(ra - rb) ){#
		smallR = min(ra, rb)#
		return(pi * smallR^2)#
	}#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}#
#
#
i <- 1#
areas = real(length(distances))#
for (d in distances){#
	areas[i] = Ao(ra, rb, d)#
	i <- i + 1#
}#
#
Au <- function(ra, rb, d){#
	relDiff <- rb^2 - ra^2#
	t1 <- ra^2 * acos( (d^2 - relDiff)/(2*d*ra) )#
	t2 <- rb^2 * acos( (d^2 + relDiff)/(2*d*rb) )#
	t3 <- sqrt( (d^2 - relDiff)/2 )#
	return(t1 + t2 - t3)#
}#
#
plot(distances, areas, type="l", ylab="area of overlap", xlab="distance between centers")#
#
lines(distances, Au(ra, rb,distances), col="Blue")
randomPointsInCircle <- function(x, y, r, n){#
	# generate n random points within the circle centered at (x,y) with radius r#
	# vector version#
	randTheta <- 2 * pi * runif(n)	# random angle in radians#
	randR <- r * sqrt(runif(n))#
	randX <- x + randR * sin(randTheta)#
	randY <- y + randR * cos(randTheta)#
	return(list(x=randX, y=randY))#
}#
#
isPointInCircle <- function(px, py, cx, cy, cr){#
	return ( cr^2 > (px - cx)^2 + (py - cy)^2 )#
}#
#
filterPointsInCircle <- function( pts, c2x, c2y, c2r ){#
	pic_select <- isPointInCircle(pts$x, pts$y, c2x, c2y, c2r)#
	inX <- pts$x[pic_select]#
	inY <- pts$y[pic_select]#
	return(list(x=inX, y=inY))#
}#
#
Ao_shotgun <- function(ra, rb, d){#
	n <- 10000#
	xa <- 0#
	ya <- 0#
	xb <- d#
	yb <- 0#
	pb <- randomPointsInCircle(xb, yb, rb, n)	# points in B#
	pba <- filterPointsInCircle( pb, xa, ya, ra )#
	Ab <- pi * rb^2#
	return( (pba/pb)*Ab )#
}
Ao <- function(ra, rb, d){	# ra must be >= rb#
	if ( ra + rb <= d ){#
		return(0)#
	}#
	if ( d <= abs(ra - rb) ){#
		smallR = min(ra, rb)#
		return(pi * smallR^2)#
	}#
	area = ra^2 * acos( (d^2 - (rb^2 - ra^2))/(2*d*ra) ) + rb^2 * acos( (d^2 + (rb^2 - ra^2))/(2*d*rb) ) - sqrt( (d^2-(rb^2 - ra^2))/2 )#
	return(area)#
}#
#
#
i <- 1#
areasAnalytical = real(length(distances))#
areasNumerical = real(length(distances))#
for (d in distances){#
	areasAnalytical[i] = Ao(ra, rb, d)#
	areasNumerical[i] = Ao_shotgun(ra, rb, d)#
	i <- i + 1#
}#
#
Au <- function(ra, rb, d){#
	relDiff <- rb^2 - ra^2#
	t1 <- ra^2 * acos( (d^2 - relDiff)/(2*d*ra) )#
	t2 <- rb^2 * acos( (d^2 + relDiff)/(2*d*rb) )#
	t3 <- sqrt( (d^2 - relDiff)/2 )#
	return(t1 + t2 - t3)#
}#
#
plot(distances, areas, pch='.', ylab="area of overlap", xlab="distance between centers")#
#
lines(distances, areasAnalytical, col="Blue")
q()
source("numericalVsAnalytical.R")
source("numericalVsAnalytical.R")
source("numericalVsAnalytical.R")
source("numericalVsAnalytical.R")
source("numericalVsAnalytical.R")
source("numericalVsAnalytical.R")
source("numericalVsAnalytical.R")
source("numericalVsAnalytical.R")
source("numericalVsAnalytical.R")
source("numericalVsAnalytical.R")
source("numericalVsAnalytical.R")
source("numericalVsAnalytical.R")
source("numericalVsAnalytical.R")
lines(distances, Au(distances), col="red")
lines(distances, Au(ra, rb, distances), col="red")
q()
